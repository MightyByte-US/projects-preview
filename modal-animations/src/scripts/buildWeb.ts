
import fs from 'fs';
import webpack from 'webpack';
import { merge } from 'webpack-merge';
import { parse } from 'ts-command-line-args';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import { BundleStatsWebpackPlugin } from 'bundle-stats-webpack-plugin';
import { version } from '../../package.json';
import prodConfig from '../../webpack.prod';

interface IArgs {
    generateBaseline?: boolean
}

let args: IArgs | undefined;

try {
    args = parse<IArgs>({
        generateBaseline: { type: Boolean, alias: 'b', optional: true },
    });
} catch (e) {
    console.error('Error: Failed to parse arguments', e);
}

console.log('CLI Arguments received', args);

try {
    console.log('Generating version.ts');
    const versionFileData = `// generated by serveWeb or buildWeb script\nexport const version = '${version}';\n`;
    fs.writeFileSync('version.ts', versionFileData, { flag: 'w' });

    if (fs.existsSync('webBuildBundleStats')) {
        fs.rmSync('webBuildBundleStats', { recursive: true });
    }

    fs.mkdirSync('webBuildBundleStats');

    console.log('Setting up stats folder');

    console.log('Statring the compiler, please wait...');

    if (args?.generateBaseline) {
        if (fs.existsSync('bundle-stats')) {
            fs.rmSync('bundle-stats', { recursive: true });
        }
        if (fs.existsSync('node_modules/.cache/bundle-stats')) {
            fs.rmSync('node_modules/.cache/bundle-stats', { recursive: true });
        }
    }

    let bundleStatsSaveBaseline = args?.generateBaseline ? true : false;
    if (!fs.existsSync('node_modules/.cache/bundle-stats/baseline.json')) {
        // If the baseline does not exist in .cache, see if we have a baseline in permanent storage.
        // If we have it, we copy it to .cache, otherwise a new baseline will be generated in .cache.
        if (fs.existsSync('bundle-stats/baseline.json')) {
            if (!fs.existsSync('node_modules/.cache/bundle-stats')) {
                fs.mkdirSync('node_modules/.cache/bundle-stats');
            }

            fs.copyFileSync('bundle-stats/baseline.json', 'node_modules/.cache/bundle-stats/baseline.json');
        } else {
            bundleStatsSaveBaseline = true;
        }
    }

    console.log('*** Turning on the profile mode and adding bundle analyzer plugins ***');
    const webpackConfig: webpack.Configuration = merge(prodConfig, {
        profile: true,
        plugins: [
            new BundleStatsWebpackPlugin({ html: true, outDir: '../webBuildBundleStats', baseline: bundleStatsSaveBaseline }),
            new BundleAnalyzerPlugin({
                analyzerMode: 'static',
                openAnalyzer: false,
                reportFilename: '../webBuildBundleStats/bundleAnalyzerReport.html',
            }),
        ],
    });

    webpack(webpackConfig, (error, stats) => {
        if (error) {
            console.error('Compilation failed', error.message);
            console.error({ message: error.message, name: error.name, stack: error.stack });
            return;
        }

        if (!stats) {
            console.error('Failed to get compile stats. Cleaning up webBuildBundleStats folder');
            if (fs.existsSync('webBuildBundleStats')) {
                fs.rmSync('webBuildBundleStats', { recursive: true });
            }
            return;
        }

        console.warn('Success\n', stats.toString());

        const jsonStats = stats.toJson();
        fs.writeFileSync('webBuildBundleStats/stats.json', JSON.stringify(jsonStats), { flag: 'w' });

        // In case if we are generating a new baseline for BundleStatsWebpackPlugin, copy the files from cache to it`s permanent storage
        if (fs.existsSync('node_modules/.cache/bundle-stats/baseline.json') && args?.generateBaseline) {
            if (fs.existsSync('bundle-stats')) {
                fs.rmSync('node_modules/.cache/bundle-stats', { recursive: true });
            }

            fs.mkdirSync('bundle-stats');

            fs.copyFileSync('node_modules/.cache/bundle-stats/baseline.json', 'bundle-stats/baseline.json');
        }
    });

} catch (error) {
    console.error('Error when building web', error);
}

export default null;
